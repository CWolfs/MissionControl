(window.webpackJsonp=window.webpackJsonp||[]).push([[116],{206:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return l})),a.d(t,"rightToc",(function(){return b})),a.d(t,"metadata",(function(){return o})),a.d(t,"default",(function(){return i}));var n=a(2),r=a(6),c=(a(0),a(280)),l={id:"swap-placement",title:"Swap Placement",sidebar_label:"Swap Placement"},b=[{value:"EncounterStructure",id:"encounterstructure",children:[]}],o={id:"contract-builder-api/nodes/swap-placement",title:"Swap Placement",description:"The `SwapPlacement` node allows for swapping locations around of in-game nodes.\r",source:"@site/docs\\contract-builder-api\\nodes\\swap-placement.md",permalink:"/docs/contract-builder-api/nodes/swap-placement",sidebar_label:"Swap Placement",sidebar:"docs",previous:{title:"Spawner",permalink:"/docs/contract-builder-api/nodes/spawner"},next:{title:"Combat State",permalink:"/docs/contract-builder-api/nodes/combat-state"}},p={rightToc:b,metadata:o};function i(e){var t=e.components,a=Object(r.a)(e,["components"]);return Object(c.b)("wrapper",Object(n.a)({},p,a,{components:t,mdxType:"MDXLayout"}),Object(c.b)("p",null,"The ",Object(c.b)("inlineCode",{parentName:"p"},"SwapPlacement")," node allows for swapping locations around of in-game nodes."),Object(c.b)("h2",{id:"encounterstructure"},"EncounterStructure"),Object(c.b)("p",null,"This node swaps the location of two ",Object(c.b)("inlineCode",{parentName:"p"},"EncounterObjectGameLogic")," objects in the map. This could be used to swap things like LanceSpawners around for variation."),Object(c.b)("table",null,Object(c.b)("thead",{parentName:"table"},Object(c.b)("tr",{parentName:"thead"},Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Property"),Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Required"),Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Default"),Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Details"))),Object(c.b)("tbody",{parentName:"table"},Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Name"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"true"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"-"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Name of the Node that will be used for the Unity game object")),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Type"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"true"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(c.b)("inlineCode",{parentName:"td"},"SwapPlacement")),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Type of node")),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"SubType"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"true"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(c.b)("inlineCode",{parentName:"td"},"EncounterStructure")),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Subtype of node")),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"TargetGuid1"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"true"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"-"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"The GUID of the first target ",Object(c.b)("inlineCode",{parentName:"td"},"EncounterObjectGameLogic")," to be swapped")),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"TargetGuid2"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"true"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"-"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"The GUID of the second target ",Object(c.b)("inlineCode",{parentName:"td"},"EncounterObjectGameLogic")," to be swapped")))),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-json"}),'    {\n      "Name": "Chunk_SwapSpawnerPlacement",\n      "Type": "Chunk",\n      "SubType": "Placement",\n      "ControlledByContract": true,\n      "Guid": "ed007c52-f4cb-4bfc-842a-a50454d8a82a",\n      "Children": [\n        {\n          "Name": "SwapPlacement_SwapLanceSpawners",\n          "Type": "SwapPlacement",\n          "SubType": "EncounterStructure",\n          "TargetGuid1": "76b654a6-4f2c-4a6f-86e6-d4cf868335fe", // Player spawner\n          "TargetGuid2": "f426f0dc-969d-477d-81a9-d02f9e1eff79" // Enemy spawner\n        }\n      ]\n    },\n')))}i.isMDXComponent=!0},280:function(e,t,a){"use strict";a.d(t,"a",(function(){return b})),a.d(t,"b",(function(){return i}));var n=a(0),r=a.n(n),c=r.a.createContext({}),l=function(e){var t=r.a.useContext(c),a=t;return e&&(a="function"==typeof e?e(t):Object.assign({},t,e)),a},b=function(e){var t=l(e.components);return r.a.createElement(c.Provider,{value:t},e.children)};var o={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},p=Object(n.forwardRef)((function(e,t){var a=e.components,n=e.mdxType,c=e.originalType,b=e.parentName,p=function(e,t){var a={};for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&-1===t.indexOf(n)&&(a[n]=e[n]);return a}(e,["components","mdxType","originalType","parentName"]),i=l(a),u=n,d=i[b+"."+u]||i[u]||o[u]||c;return a?r.a.createElement(d,Object.assign({},{ref:t},p,{components:a})):r.a.createElement(d,Object.assign({},{ref:t},p))}));function i(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var c=a.length,l=new Array(c);l[0]=p;var b={};for(var o in t)hasOwnProperty.call(t,o)&&(b[o]=t[o]);b.originalType=e,b.mdxType="string"==typeof e?e:n,l[1]=b;for(var i=2;i<c;i++)l[i]=a[i];return r.a.createElement.apply(null,l)}return r.a.createElement.apply(null,a)}p.displayName="MDXCreateElement"}}]);